	R3 <- 0xFF; 0 1
_init: RC <- @_start;
; 
;  Пусть регистр R03 отвечает за стек.;
;  Стек начинается с адреса 0xFF и растёт вверх (=> хотелось бы декремент, но...);
;  Поэтому для пробрасывания значения в стек будет использован "костыль";
;  (сейчас для примера регистр R2):;
;  1) write R2 по назначению;
;  2) R2 = 1;
;  3) R03 -= R2;
;  Для взятия из стека нужен следующий метод (регистр R2):;
;  1) inc R03;
;  2) read R2;
; 
;  place to save argumentv
var1: R00 <- R00 ; (cmd_id=13; 4) 
;  n - N; fib(n<3)=1r
; 
ret_fibbonaci: R00 <- R00 ; (cmd_id=16; 5) 
;  FUNCTION fibbonacif
fibbonaci: R00 <- R00 ; (cmd_id=18; 6) 
	R00 <- @4 ; (cmd_id=19; 7, 8) Прочитать аргумент
	R01 <- 3; (cmd_id=20; 9, 10) 
	RF <- R00 ~ R01 ; (cmd_id=21; 11) 
	RC <- @fib_fast(S); (cmd_id=22; 12, 13)  Если < 3 - короткий путь
	RF <- R00 ~ R01 ; (cmd_id=23; 14) 
	RC <- @fib_3(Z); (cmd_id=24; 15, 16)  Если 3 - ответ 2
	R01 <- 1; (cmd_id=25; 17, 18) fib(n)=fib(n-1)+fib(n-2). n хранить в R0, поэтому R0 сохранить ОБЯЗАНЫ.
	R00 <- R00 - R01 ; (cmd_id=26; 19) 
	@4 <- R00 ; (cmd_id=27; 20, 21) 
;  Сохранить только регистр R0 @
	@25 <- R03 ; (cmd_id=29; 22, 23)  PUSH R0 
	@0 <- R00 ; (cmd_id=30; 24, 25) 
	R00 <- 1; (cmd_id=31; 26, 27) 
	R03 <- R03 - R00 ; (cmd_id=32; 28) 
	R00 <- 40; (cmd_id=33; 29, 30) 
	@34 <- R03 ; (cmd_id=34; 31, 32)  PUSH R0 
	@0 <- R00 ; (cmd_id=35; 33, 34) 
	R00 <- 1; (cmd_id=36; 35, 36) 
	R03 <- R03 - R00 ; (cmd_id=37; 37) 
	RC <- @fibbonaci; (cmd_id=38; 38, 39) 
_fib_1: R03 <- R03++ ; (cmd_id=39; 40)  POP R0 
	@44 <- R03 ; (cmd_id=40; 41, 42) 
	R00 <- @0 ; (cmd_id=41; 43, 44) 
; 
	R02 <- @5 ; (cmd_id=43; 45, 46)  R2=fib(n-1)
	R01 <- 1; (cmd_id=44; 47, 48) 
	R00 <- R00 - R01 ; (cmd_id=45; 49)  n-2
	@4 <- R00 ; (cmd_id=46; 50, 51) 
	R00 <- R02 ; (cmd_id=47; 52)  теперь можно сохранять только R0
;  Сохранить только регистр R0 @
	@56 <- R03 ; (cmd_id=49; 53, 54)  PUSH R0 
	@0 <- R00 ; (cmd_id=50; 55, 56) 
	R00 <- 1; (cmd_id=51; 57, 58) 
	R03 <- R03 - R00 ; (cmd_id=52; 59) 
	R00 <- 71; (cmd_id=53; 60, 61) 
	@65 <- R03 ; (cmd_id=54; 62, 63)  PUSH R0 
	@0 <- R00 ; (cmd_id=55; 64, 65) 
	R00 <- 1; (cmd_id=56; 66, 67) 
	R03 <- R03 - R00 ; (cmd_id=57; 68) 
	RC <- @fibbonaci; (cmd_id=58; 69, 70) 
_fib_2: R03 <- R03++ ; (cmd_id=59; 71)  POP R0 
	@75 <- R03 ; (cmd_id=60; 72, 73) 
	R00 <- @0 ; (cmd_id=61; 74, 75) 
; 
	R02 <- @5 ; (cmd_id=63; 76, 77)  R0=fib(n-2)
	R02 <- R02 + R00 ; (cmd_id=64; 78) 
	@5 <- R02 ; (cmd_id=65; 79, 80) 
	R03 <- R03++ ; (cmd_id=66; 81)  POP R0 
	@85 <- R03 ; (cmd_id=67; 82, 83) 
	R00 <- @0 ; (cmd_id=68; 84, 85) 
; 
; EXIT @
	@89 <- R00 ; (cmd_id=71; 86, 87) 
	RC <- @0 ; (cmd_id=72; 88, 89) 
fib_3: R00 <- 2; (cmd_id=73; 90, 91) 
	@5 <- R00 ; (cmd_id=74; 92, 93) 
	R03 <- R03++ ; (cmd_id=75; 94)  POP R0 
	@98 <- R03 ; (cmd_id=76; 95, 96) 
	R00 <- @0 ; (cmd_id=77; 97, 98) 
; 
; EXIT @
	@102 <- R00 ; (cmd_id=80; 99, 100) 
	RC <- @0 ; (cmd_id=81; 101, 102) 
fib_fast: R01 <- 0; (cmd_id=82; 103, 104) 
	RF <- R00 ~ R01 ; (cmd_id=83; 105) 
	RC <- @fib_zero(Z); (cmd_id=84; 106, 107) 
	R00 <- 1; (cmd_id=85; 108, 109) 
	RC <- @exit1; (cmd_id=86; 110, 111) 
fib_zero: R00 <- 0; (cmd_id=87; 112, 113) 
exit1: @5 <- R00 ; (cmd_id=88; 114, 115) 
	R03 <- R03++ ; (cmd_id=89; 116)  POP R0 
	@120 <- R03 ; (cmd_id=90; 117, 118) 
	R00 <- @0 ; (cmd_id=91; 119, 120) 
; 
; EXIT @
	@124 <- R00 ; (cmd_id=94; 121, 122) 
	RC <- @0 ; (cmd_id=95; 123, 124) 
; 
_start: R00 <- R00 ; (cmd_id=97; 125) 
; 
	R00 <- 10; (cmd_id=99; 126, 127)  fibbonaci(10)
	@4 <- R00 ; (cmd_id=100; 128, 129) 
;  Не сохранять регистры R
	R00 <- 141; (cmd_id=102; 130, 131) 
	@135 <- R03 ; (cmd_id=103; 132, 133)  PUSH R0 
	@0 <- R00 ; (cmd_id=104; 134, 135) 
	R00 <- 1; (cmd_id=105; 136, 137) 
	R03 <- R03 - R00 ; (cmd_id=106; 138) 
	RC <- @fibbonaci; (cmd_id=107; 139, 140) 
_start_fib: R00 <- R00 ; (cmd_id=108; 141) 
	R00 <- @5 ; (cmd_id=109; 142, 143) 
	@207 <- R00 ; (cmd_id=110; 144, 145) 
; 
HLT: RC <- @HLT; (cmd_id=112; 146, 147) 
; 