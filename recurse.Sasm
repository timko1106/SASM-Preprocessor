	R3 <- 0xFF; 0 1
_init: RC <- @_start;

; Пусть регистр R03 отвечает за стек.
; Стек начинается с адреса 0xFF и растёт вверх (=> хотелось бы декремент, но...)
; Поэтому для пробрасывания значения в стек будет использован "костыль"
; (сейчас для примера регистр R2):
; 1) write R2 по назначению
; 2) R2 = 1
; 3) R03 -= R2
; Для взятия из стека нужен следующий метод (регистр R2):
; 1) inc R03
; 2) read R2

; place to save argument
var1: R00 <- R00 ; (4)
; n - N; fib(n<3)=1

ret_fibbonaci: R00 <- R00 ; (5)
; FUNCTION fibbonaci
fibbonaci: R00 <- R00 ; (6)
	R00 <- @4 ; (7, 8) Прочитать аргумент
	R01 <- 3 ; (9, 10)
	RF <- R00 ~ R01 ; (11)
	RC <- @fib_fast(S) ; (12, 13)  Если < 3 - короткий путь
	RF <- R00 ~ R01 ; (14)
	RC <- @fib_3(Z) ; (15, 16)  Если 3 - ответ 2
	R01 <- 1 ; (17, 18) fib(n)=fib(n-1)+fib(n-2). n хранить в R0, поэтому R0 сохранить ОБЯЗАНЫ.
	R00 <- R00 - R01 ; (19)
	@4 <- R00 ; (20, 21)
; Сохранить только регистр R0 
	@25 <- R03 ; (22, 23)  PUSH R0 
	@0 <- R00 ; (24, 25)
	R00 <- 1 ; (26, 27)
	R03 <- R03 - R00 ; (28)
	R00 <- 40 ; (29, 30)
	@34 <- R03 ; (31, 32)  PUSH R0 
	@0 <- R00 ; (33, 34)
	R00 <- 1 ; (35, 36)
	R03 <- R03 - R00 ; (37)
	RC <- @fibbonaci ; (38, 39)
_fib_1: R03 <- R03++ ; (40)  POP R0 
	@44 <- R03 ; (41, 42)
	R00 <- @0 ; (43, 44)

	R02 <- @5 ; (45, 46)  R2=fib(n-1)
	R01 <- 1 ; (47, 48)
	R00 <- R00 - R01 ; (49)  n-2
	@4 <- R00 ; (50, 51)
	R00 <- R02 ; (52)  теперь можно сохранять только R0
; Сохранить только регистр R0 
	@56 <- R03 ; (53, 54)  PUSH R0 
	@0 <- R00 ; (55, 56)
	R00 <- 1 ; (57, 58)
	R03 <- R03 - R00 ; (59)
	R00 <- 71 ; (60, 61)
	@65 <- R03 ; (62, 63)  PUSH R0 
	@0 <- R00 ; (64, 65)
	R00 <- 1 ; (66, 67)
	R03 <- R03 - R00 ; (68)
	RC <- @fibbonaci ; (69, 70)
_fib_2: R03 <- R03++ ; (71)  POP R0 
	@75 <- R03 ; (72, 73)
	R00 <- @0 ; (74, 75)

	R02 <- @5 ; (76, 77)  R0=fib(n-2)
	R02 <- R02 + R00 ; (78)
	@5 <- R02 ; (79, 80)
	R03 <- R03++ ; (81)  POP R0 
	@85 <- R03 ; (82, 83)
	R00 <- @0 ; (84, 85)

;EXIT 
	@89 <- R00 ; (86, 87)
	RC <- @0  ; (88, 89)
fib_3: R00 <- 2 ; (90, 91)
	@5 <- R00 ; (92, 93)
	R03 <- R03++ ; (94)  POP R0 
	@98 <- R03 ; (95, 96)
	R00 <- @0 ; (97, 98)

;EXIT 
	@102 <- R00 ; (99, 100)
	RC <- @0  ; (101, 102)
fib_fast: R01 <- 0 ; (103, 104)
	RF <- R00 ~ R01 ; (105)
	RC <- @fib_zero(Z) ; (106, 107)
	R00 <- 1 ; (108, 109)
	RC <- @exit1 ; (110, 111)
fib_zero: R00 <- 0 ; (112, 113)
exit1: @5 <- R00 ; (114, 115)
	R03 <- R03++ ; (116)  POP R0 
	@120 <- R03 ; (117, 118)
	R00 <- @0 ; (119, 120)

;EXIT 
	@124 <- R00 ; (121, 122)
	RC <- @0  ; (123, 124)

_start: R00 <- R00 ; (125)

	R00 <- 5 ; (126, 127)  fibbonaci(10)
	@4 <- R00 ; (128, 129)
; Не сохранять регистры 
	R00 <- 141 ; (130, 131)
	@135 <- R03 ; (132, 133)  PUSH R0 
	@0 <- R00 ; (134, 135)
	R00 <- 1 ; (136, 137)
	R03 <- R03 - R00 ; (138)
	RC <- @fibbonaci ; (139, 140)
_start_fib: R00 <- R00 ; (141)
	R00 <- @5 ; (142, 143)
	@207 <- R00 ; (144, 145)

HLT: RC <- @HLT ; (146, 147)
